% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/handlers_stream.R
\name{PawsStreamHandler}
\alias{PawsStreamHandler}
\title{Iterate over AWS Event Stream connection}
\usage{
paws_stream_handler(FUN, .chunk_kb = 64 * 1024, .connection = FALSE)
paws_stream_parser(con)
}
\arguments{
\item{FUN}{function to iterate over stream connection.}

\item{.chunk_kb}{size of chunks (default 64 KB)}

\item{.connection}{return \code{httr2::req_perform_connection} object (default \code{FALSE})}
}
\value{
list of responses from the operation or a curl connection
}
\description{
Iterate over AWS Event Stream connection
}
\examples{
\dontrun{
# Developed from:
# https://docs.aws.amazon.com/code-library/latest/ug/python_3_bedrock-runtime_code_examples.html
library(paws)

# Create a Bedrock Runtime client in the AWS Region you want to use.
client <- bedrockruntime(region = "us-east-1")

# Set the model ID, e.g., Titan Text Premier.
model_id <- "amazon.titan-text-premier-v1:0"

# Start a conversation with the user message.
user_message = "Describe the purpose of a 'hello world' program in one line."
conversation <- list(
  list(
    role = "user",
    content = list(list(text=user_message))
  )
)

resp <- client$converse_stream(
  modelId = model_id,
  messages = conversation,
  inferenceConfig = list(maxTokens=512, temperature=0.5, topP=0.9)
)
resp$stream(\(chunk) print(chunk$contentBlockDelta$delta$text))

# or return httr2 resp_perform_connection
resp$stream(.connection = T)
}
}
